
import React, { useState, useEffect, useRef } from 'react';
import Modal from './Modal';
import { Card as CardType, PredictionResult } from '../types';
import { generatePrediction } from '../services/gameService';
import { FULL_DECK, SUIT_SYMBOLS, SUIT_COLORS } from '../constants';

const CameraScanner: React.FC<{ onClose: () => void }> = ({ onClose }) => {
    const videoRef = useRef<HTMLVideoElement>(null);
    const [stream, setStream] = useState<MediaStream | null>(null);
    const [error, setError] = useState<string | null>(null);
    const [isScanning, setIsScanning] = useState(false);
    const [prediction, setPrediction] = useState<PredictionResult | null>(null);

    useEffect(() => {
        const startCamera = async () => {
            try {
                const mediaStream = await navigator.mediaDevices.getUserMedia({ 
                    video: { facingMode: 'environment' } 
                });
                setStream(mediaStream);
                if (videoRef.current) {
                    videoRef.current.srcObject = mediaStream;
                }
            } catch (err) {
                console.error("Camera access error:", err);
                setError("Could not access camera. Please ensure you have a camera connected and have granted permission in your browser settings.");
            }
        };

        startCamera();

        return () => {
            // Cleanup: stop camera stream when component unmounts
            if (stream) {
                stream.getTracks().forEach(track => track.stop());
            }
        };
    }, []); // Empty dependency array ensures this runs only once on mount

    const handleScan = () => {
        setIsScanning(true);
        setPrediction(null);
        // Simulate scanning and analysis time
        setTimeout(() => {
            // In a real app, this would come from an image recognition model
            // Here, we simulate by picking a random card as the marker
            const randomMarker = FULL_DECK[Math.floor(Math.random() * FULL_DECK.length)];
            const { predictions } = generatePrediction(randomMarker);
            
            // Show the first prediction
            if (predictions.length > 0) {
                setPrediction(predictions[0]);
            }
            setIsScanning(false);
        }, 2500); // 2.5 second scan
    };

    return (
        <Modal title="Live Card Scanner" onClose={onClose}>
            <div className="relative w-full aspect-video bg-gray-900 rounded-lg overflow-hidden flex items-center justify-center">
                {error ? (
                    <div className="text-center text-red-400 p-4">
                        <h3 className="font-bold">Camera Error</h3>
                        <p className="text-sm">{error}</p>
                    </div>
                ) : (
                    <video ref={videoRef} autoPlay playsInline muted className="w-full h-full object-cover" />
                )}

                {isScanning && (
                    <div className="absolute inset-0 bg-black/30 flex flex-col items-center justify-center">
                        <div className="w-24 h-24 border-4 border-dashed border-white rounded-full animate-spin"></div>
                        <p className="text-white mt-4 font-semibold">Analyzing card pattern...</p>
                    </div>
                )}
                
                {prediction && (
                    <div className="absolute top-4 left-4 bg-white/80 backdrop-blur-md p-4 rounded-lg shadow-xl animate-fade-in-up">
                        <h4 className="font-bold text-purple-700">Prediction Found!</h4>
                        <p className="text-gray-700">Next matching card for <span className="font-bold">{prediction.card.rank}</span>:</p>
                        <div className="flex items-center gap-4 mt-2">
                            <div className={`font-bold text-4xl ${SUIT_COLORS[prediction.card.suit]}`}>
                                {prediction.card.rank}{SUIT_SYMBOLS[prediction.card.suit]}
                            </div>
                            <div>
                                <p>Side: <span className={`font-bold ${prediction.side === 'Bahar' ? 'text-blue-600' : 'text-green-600'}`}>{prediction.side}</span></p>
                                <p>Position: <span className="font-bold">{prediction.position}</span></p>
                            </div>
                        </div>
                    </div>
                )}
                
                {/* Scanner Line Overlay */}
                {isScanning && <div className="scanner-line"></div>}
            </div>

            <div className="mt-6 text-center">
                <button
                    onClick={handleScan}
                    disabled={isScanning || !!error}
                    className="px-8 py-4 bg-blue-600 hover:bg-blue-700 text-white font-bold rounded-lg shadow-lg transform hover:scale-105 transition-all duration-200 disabled:bg-gray-400 disabled:cursor-not-allowed disabled:scale-100"
                >
                    {isScanning ? 'Scanning...' : 'Scan for Prediction'}
                </button>
            </div>

             <style>{`
                .scanner-line {
                    position: absolute;
                    top: 0;
                    left: 0;
                    right: 0;
                    height: 3px;
                    background: linear-gradient(to right, transparent, rgba(0, 255, 255, 0.8), transparent);
                    box-shadow: 0 0 10px cyan;
                    animation: scan 2.5s ease-in-out infinite;
                }
                @keyframes scan {
                    0% { top: 0; }
                    50% { top: 100%; }
                    100% { top: 0; }
                }
                @keyframes fade-in-up {
                    from { opacity: 0; transform: translateY(10px); }
                    to { opacity: 1; transform: translateY(0); }
                }
                .animate-fade-in-up {
                    animation: fade-in-up 0.5s ease-out forwards;
                }
            `}</style>
        </Modal>
    );
};

export default CameraScanner;
